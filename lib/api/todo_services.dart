// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

abstract class TodoServices {
  /// Cette methode permet de générer une impl de DartCObject pour l'objet TodoEvent
  Future<void> dummyTodoEvent({required TodoEvent todoEvent, dynamic hint});

  Future<void> dummyLogMessage({required LogMessage logMessage, dynamic hint});

  /// ## Init log stream
  ///
  Stream<LogMessage> logStream({dynamic hint});

  /// ## Load App Config
  ///
  /// Cette méthode permet de charger la configuration de l'application
  Future<void> loadAppConfig({required String config, dynamic hint});

  /// ## Todo Events
  ///
  /// Cette méthode permet de créer un Stream de TodoEvent
  ///
  /// à travers lequel des messages pourront être envoyés de Rust -> Flutter
  Stream<TodoEvent> todoEvents({dynamic hint});

  /// ## Init Db
  ///
  /// Cette méthode permet d'initialiser la base de données
  Future<void> initDb({dynamic hint});

  /// ## Create Todo
  ///
  /// Cette méthode permet de créer un Todo
  ///
  /// A la création du Todo, un event est envoyé
  Future<void> createTodo({required CreateTodoRequest request, dynamic hint});

  Future<void> updateTodo(
      {required String id, required UpdateTodoRequest request, dynamic hint});

  Future<void> deleteTodo({required String id, dynamic hint});

  /// Get All Todos
  ///
  /// Cette méthode permet de récupérer tous les Todos
  Future<List<Todo>> getAllTodos({dynamic hint});
}

class CreateTodoRequest {
  final String label;

  CreateTodoRequest({
    required this.label,
  });
}

enum EventType {
  Created,
  Updated,
  Deleted,
  Error,
}

enum LogLevel {
  INFO,
  WARNING,
  ERROR,
}

class LogMessage {
  final LogLevel level;
  final String message;

  LogMessage({
    required this.level,
    required this.message,
  });
}

enum Status {
  UNDONE,
  DONE,
}

class Todo {
  final String id;
  final TodoData? data;

  Todo({
    required this.id,
    this.data,
  });
}

class TodoData {
  final String label;
  final Status status;
  final String createdAt;

  TodoData({
    required this.label,
    required this.status,
    required this.createdAt,
  });
}

class TodoEvent {
  final EventType eventType;
  final String? errorMessage;
  final Todo? data;

  TodoEvent({
    required this.eventType,
    this.errorMessage,
    this.data,
  });
}

class UpdateTodoRequest {
  final Status status;

  UpdateTodoRequest({
    required this.status,
  });
}
